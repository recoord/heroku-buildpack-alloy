#!/usr/bin/env bash
#
# start-alloy --config=<config> <command>
#
# This script acts as a process manager, of two children, waiting for either
# alloy or the chained command to return before exiting.
#
#
# Delegates SIGTERM to the children on signal or child exit

at() {
    echo "buildpack=alloy at=$*"
}

# fifo for communication between children
wait_channel=$(mktemp -t buildpack-alloy-wait-XXXXX) || exit 1
rm "$wait_channel" || exit 1
mkfifo "$wait_channel" || exit 1

# Graceful shutdown to process group, forced with SIGINT. Can be called multiple
# times from parent or child signals.
shutdown() {
    at "shutdown pgid=$$"
    rm -f "$wait_channel" # Remove blocking writes for subshells to shutdown
    trap '' SIGTERM EXIT  # Remove recursive signals
    kill -TERM -$$        # Graceful TERM for process group
    wait
    rm -f "$wait_channel" # Cleanup unblocked writes
}
trap shutdown SIGTERM EXIT

# Defaults
ALLOY_CONFIG="${ALLOY_CONFIG:-config.alloy}"

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --config=*)
            ALLOY_CONFIG="${1#--config=}"
            shift
            ;;
        --help)
            echo "start-alloy --config=<path/config.alloy> <command>"
            shift
            exit 0
            ;;
        *)
            break
            ;;
    esac
done
at "args config=$ALLOY_CONFIG"

# Only run when we have an alloy config
if [[ -f "$ALLOY_CONFIG" ]]; then
    (
        at "run alloy"
        trap "" SIGTERM # Ignore in subshell so we shutdown via fifo
        mkdir -p /var/tmp/buildpack-alloy
        vendor/alloy/bin/alloy run \
            --storage.path="/var/tmp/buildpack-alloy" \
            "$ALLOY_CONFIG"
        echo "process=alloy code=$?" >"$wait_channel"
    ) &
else
    at "skip alloy missing config=$ALLOY_CONFIG"
fi

(
    at "run app cmd=\"$*\""
    trap "" SIGTERM # Ignore in subshell so we shutdown via fifo
    "$@"
    echo "process=app code=$?" >"$wait_channel"
) &

# Wait for either child subshell exit
read -r exit_status <"$wait_channel"
shutdown
at "exit $exit_status"
